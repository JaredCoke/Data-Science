import numpy as np

def calculate(list):
  ######################################################
  # C A L C U L A T E   L I S T   L E N G T H 
  ######################################################
  list_length = len(list)

  # If value doesn't equal 9, throw it out
  if list_length != 9:
    raise ValueError("List must contain nine numbers.")
    
  ######################################################
  # C O N V E R T   L I S T   T O   M A T R I X
  ######################################################
  # convert list to 3x3 NumPy array
  matrix_3x3 = np.array(list).reshape(3,3)
  
  ######################################################
  # M A X
  ######################################################
  # Find max element in rows
  matrix_3x3_row_max = np.max(matrix_3x3, axis=0)
    
  # Find max element in columns
  matrix_3x3_column_max = np.max(matrix_3x3, axis=1)

  
  ######################################################
  # M I N
  ######################################################
  # Find min element in rows
  matrix_3x3_row_min = np.min(matrix_3x3, axis=0)
    
  # Find min element in columns
  matrix_3x3_column_min = np.min(matrix_3x3, axis=1)

  
  ######################################################
  # S U M
  ######################################################
  # sum of the rows
  row_sum_matrix = np.sum(matrix_3x3, axis=0)
  
  # sum of the columns
  col_sum_matrix = np.sum(matrix_3x3, axis=1)
  
  
  ######################################################
  # M E A N
  ######################################################
  # Rows
  row_of_column_means = np.mean(matrix_3x3, axis=0)

  # Columns
  column_of_row_means = np.mean(matrix_3x3, axis=1)

  
  ######################################################
  # V A R I A N C E
  ######################################################
  # Find the row variances
  row_variances = np.var(matrix_3x3, axis=0)

  # Find the column variances
  column_variances = np.var(matrix_3x3, axis=1)

  
  ######################################################
  # S T A N D A R D   D E V I A T I O N
  ######################################################
  # Find the row standard deviation
  row_std_dev = np.std(matrix_3x3, axis=0)

  # Find the column std_devs
  column_std_dev = np.std(matrix_3x3, axis=1)

  
  ######################################################
  # C O N V E R T   T O   D I C T I O N A R Y
  ######################################################
  # Convert all values to dictionary
  calculations = dict({
    'mean': [row_of_column_means.tolist(), column_of_row_means.tolist(), matrix_3x3.mean()],
    'variance':[row_variances.tolist(), column_variances.tolist(), matrix_3x3.var()],
    'standard deviation':[row_std_dev.tolist(), column_std_dev.tolist(), matrix_3x3.std()],
    'max':[matrix_3x3_row_max.tolist(), matrix_3x3_column_max.tolist(), matrix_3x3.max()], 
    'min':[matrix_3x3_row_min.tolist(), matrix_3x3_column_min.tolist(), matrix_3x3.min()],
    'sum':[row_sum_matrix.tolist(), col_sum_matrix.tolist(), matrix_3x3.sum()]
    })
#return calculations

  return calculations